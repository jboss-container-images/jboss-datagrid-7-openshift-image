= Red Hat Cache Service

This service, Red Hat Cache Service, is configured as an in-memory caching service without persistence.
Data in the cache will be lost if the service is stopped or restarted, and therefore, it should not be used as a
permanent store for data. It can be used to improve your applicationâ€™s response time, by keeping frequently and
recently accessed data in a high speed in-memory store.

The service is based on https://www.redhat.com/en/technologies/jboss-middleware/data-grid[Red Hat Data Grid] technology
and they expose various endpoints and configurations depending on the use case.

== Detailed Cache Features

The detailed configuration is tightly connected to JBoss Data Grid Cache Configuration. The service provides:

- A single, distributed (with number of owners set to 1) default cache
- Data eviction based on occupied memory
- Authentication and Encryption
- No Cache Store

== Getting started

Before you begin working with Red Hat Cache Service, you will need a working OpenShift cluster as well as an `oc`
 client in your `$PATH`. See  https://docs.openshift.com/online/welcome/index.html[OpenShift documentation] how to achieve this.

=== Installing Red Hat Cache Service into Service Catalog

Red Hat Cache Service is supported on OpenShift Container Platform 3.7 (and equivalents such as OpenShift Online). In order to
 make Red Hat Cache Service available in the Service Catalog, the administrator needs to add the template into the `openshift`
 namespace. This can be done by invoking `oc create -f templates/cache-service-template.json -n openshift`.

=== Instantiating Red Hat Cache Service

Once the above templates are correctly installed, you can instantiate them using  the appropriate icon in the catalog.

image::img/catalog-walkthrough.gif[Red Hat Cache Service in the Service Catalog]

The list of parameters is explained below:

.Red Hat Cache Service parameters
[options="header"]
|======================
|Option                    |Required/Optional? |Description                                                                               |Default option
|APPLICATION_NAME          |Required           |Application name                                                                          |cache-service-app
|IMAGE                     |Required           |Image that will be used to bootstrap the service                                          |jboss-datagrid-7/datagrid72-openshift
|NUMBER_OF_INSTANCES       |Required           |Number of instances                                                                       |1
|TOTAL_CONTAINER_MEM       |Optional           |Total container size (both limits and requests)                                           |512
|APPLICATION_USER          |Required           |Username used for authentication                                                          |<none>
|APPLICATION_PASSWORD      |Optional           |Password used for authentication                                                          |<generated>
|======================

NOTE: The `IMAGE` parameter will be removed in the GA.

=== Creating a client application

Once you instantiate one of the services, you might want to connect to it using a Hot Rod or REST client.

Both endpoints use encryption as well as authentication. TLS certificates for the server are generated automatically
 by OpenShift. A client deployed inside OpenShift obtains them automatically (Kubernetes puts them in `/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt`).
 However when a client is deployed outside of the cloud,
 the easiest to obtain them is to use `oc` client. The last part is authentication - both user name and password
 are specified as the Caching Service Template parameters.

The https://github.com/jboss-developer/jboss-jdg-quickstarts/tree/jdg-7.2.x/caching-service[Red Hat Cache Service quickstart] is
 the easiest way to get everything up and running. It shows how to deploy a client application into the cloud (using
 https://maven.fabric8.io/[Fabric8 Maven Plugin]) as well how to obtain a certificate from the `oc` client.
